type Response_2 = 
 variant {
   err: Error;
   ok: vec record {
             text;
             CharacterClass;
           };
 };
type Response_1 = 
 variant {
   err: Error;
   ok: vec record {
             text;
             Character;
           };
 };
type Response = 
 variant {
   err: Error;
   ok: text;
 };
type Error = 
 variant {
   AlreadyExisting;
   NotAuthorized;
   NotFound;
 };
type CharacterClass = 
 record {
   baseHp: int;
   baseMana: int;
   baseMorale: int;
   baseStamina: int;
   description: text;
   name: text;
   specialAbility: text;
   uuid: opt int;
 };
type Character = 
 record {
   classId: opt int;
   currentExp: int;
   currentHp: int;
   currentMana: int;
   currentMorale: int;
   currentStamina: int;
   gearIds: opt vec text;
   intelligent: int;
   level: int;
   luck: int;
   lvlUpExp: int;
   materialIds: opt vec text;
   maxHp: int;
   maxMana: int;
   maxMorale: int;
   maxStamina: int;
   name: text;
   strength: int;
   uuid: opt int;
   vitality: int;
 };
service : {
  createCharacter: (text, text) -> (Response);
  createCharacterClass: (CharacterClass) -> (Response);
  listCharacterClasses: () -> (Response_2) query;
  listCharacters: () -> (Response_1) query;
  updateCharacter: (int, int, int, int, int) -> (Response);
}
